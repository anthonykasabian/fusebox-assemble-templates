declare let __root__: any;
declare let __fbx__dnm__: any;
declare const $isBrowser: Navigator;
declare const $fsbx: any;
declare const $packages: any;
declare const $events: any;
interface IReference {
    file?: any;
    serverReference?: string;
    pkgName?: string;
    versions?: any;
    filePath?: string;
    validPath?: string;
    wildcard?: string;
}
declare const $getNodeModuleName: (name: string) => string[];
declare const $getDir: (filePath: string) => string;
declare const $pathJoin: (...string: string[]) => string;
declare const $ensureExtension: (name: string) => string;
declare const $loadURL: (url: string) => void;
declare const $getRef: (name: string, opts: {
    path?: string;
    pkg?: string;
    v?: {
        [pkg: string]: string;
    };
}) => IReference;
declare const $async: (file: string, cb: (imported?: any) => any) => any;
declare const $trigger: (name: string, args: any) => boolean;
declare const $import: (name: string, opts?: any) => any;
declare class FuseBox {
    static packages: any;
    static mainFile: string;
    static isBrowser: boolean;
    static isServer: boolean;
    static global(key: string, obj?: any): any;
    static import(name: string, opts: any): any;
    static on(name: string, fn: any): void;
    static exists(path: string): boolean;
    static remove(path: string): void;
    static main(name: string): any;
    static expose(obj: any): void;
    static dynamic(path: string, str: string, opts?: {
        pkg: string;
    }): void;
    static flush(fileName?: string): void;
    static pkg(pkg_name: string, versions: any, fn: any): any;
}
