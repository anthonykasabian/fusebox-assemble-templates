import { Server, ServerOptions } from "./devServer/Server";
import { WorkFlowContext } from "./WorkflowContext";
import { CollectionSource } from "./CollectionSource";
import { BundleData } from "./Arithmetic";
import { ModuleCollection } from "./ModuleCollection";
export interface FuseBoxOptions {
    homeDir?: string;
    modulesFolder?: string;
    tsConfig?: string;
    package?: string;
    cache?: boolean;
    log?: boolean;
    globals?: {
        [packageName: string]: string;
    };
    plugins?: any[];
    shim?: any;
    standaloneBundle?: boolean;
    sourceMap?: any;
    ignoreGlobal?: string[];
    outFile?: string;
    files?: any;
    transformTypescript?: (contents: string) => string;
}
export declare class FuseBox {
    opts: FuseBoxOptions;
    static init(opts?: FuseBoxOptions): FuseBox;
    virtualFiles: any;
    collectionSource: CollectionSource;
    context: WorkFlowContext;
    constructor(opts?: FuseBoxOptions);
    triggerPre(): void;
    triggerStart(): void;
    triggerEnd(): void;
    triggerPost(): void;
    bundle(str: string | {
        [bundleStr: string]: string;
    }, bundleReady?: any): Promise<any>;
    devServer(str: string, opts?: ServerOptions): Server;
    process(bundleData: BundleData, bundleReady?: () => any): Promise<ModuleCollection>;
    addShims(): void;
    test(str: string, opts: any): Promise<any>;
    initiateBundle(str: string, bundleReady?: any): Promise<any>;
}
