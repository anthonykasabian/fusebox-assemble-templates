import { BundleSource } from "./BundleSource";
import { File } from "./File";
import { Log } from "./Log";
import { IPackageInformation } from "./PathMaster";
import { ModuleCollection } from "./ModuleCollection";
import { ModuleCache } from "./ModuleCache";
import { EventEmitter } from "./EventEmitter";
import { SourceChangedEvent } from './devServer/Server';
export interface Plugin {
    test?: RegExp;
    dependencies?: string[];
    init?: {
        (context: WorkFlowContext);
    };
    transform?: {
        (file: File, ast?: any);
    };
    transformGroup?: {
        (file: File);
    };
    onTypescriptTransform?: {
        (file: File);
    };
    bundleStart?(context: WorkFlowContext): any;
    bundleEnd?(context: WorkFlowContext): any;
}
export declare class WorkFlowContext {
    shim: any;
    sourceChangedEmitter: EventEmitter<SourceChangedEvent>;
    defaultPackageName: string;
    transformTypescript?: (contents: string) => string;
    ignoreGlobal: string[];
    nodeModules: Map<string, ModuleCollection>;
    libPaths: Map<string, IPackageInformation>;
    homeDir: string;
    printLogs: boolean;
    plugins: Plugin[];
    fileGroups: Map<string, File>;
    useCache: boolean;
    doLog: boolean;
    cache: ModuleCache;
    tsConfig: any;
    customModulesFolder: string;
    tsMode: boolean;
    loadedTsConfig: string;
    globals: {
        [packageName: string]: string;
    };
    standaloneBundle: boolean;
    source: BundleSource;
    sourceMapConfig: any;
    outFile: string;
    initialLoad: boolean;
    log: Log;
    pluginTriggers: Map<string, Set<String>>;
    storage: Map<string, any>;
    initCache(): void;
    emitJavascriptHotReload(file: File): void;
    isShimed(name: string): boolean;
    reset(): void;
    setItem(key: string, obj: any): void;
    getItem(key: string): any;
    createFileGroup(name: string): File;
    getFileGroup(name: string): File;
    allowExtension(ext: string): void;
    setHomeDir(dir: string): void;
    setLibInfo(name: string, version: string, info: IPackageInformation): Map<string, IPackageInformation>;
    convert2typescript(name: string): string;
    getLibInfo(name: string, version: string): IPackageInformation;
    setPrintLogs(printLogs: boolean): void;
    setUseCache(useCache: boolean): void;
    hasNodeModule(name: string): boolean;
    isGlobalyIgnored(name: string): boolean;
    addNodeModule(name: string, collection: ModuleCollection): void;
    getTypeScriptConfig(): any;
    isFirstTime(): boolean;
    writeOutput(outFileWritten?: () => any): void;
    getNodeModule(name: string): ModuleCollection;
    triggerPluginsMethodOnce(name: string, args: any, fn?: {
        (plugin: Plugin);
    }): void;
    private pluginRequiresTriggering(cls, method);
}
